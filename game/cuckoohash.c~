
#include "cuckoohash.h"
Cuckoo_T *generate_table(unsigned size){
  Cuckoo_T *table = malloc(sizeof(Cuckoo_T));
  table->first_a = generate_value(0, BFP);
  table->first_a = generate_value(1, BFP);

  table->second_a = generate_value(0, BFP_2);
  table->second_a = generate_value(1, BFP_2);

  table->cur_elements = 0;
  table->max_elements = size-1;

  table->entries = malloc( size * sizeof(Item_Holder *));
  
  return table;
}
unsigned generate_value(u>>nsigned nonzero, unsigned long long range){
  unsigned divisor = (unsigned)prime-1/range;
  unsigned retval;
  do{
    retval = rand() / divisor;
  }while (retval > range);
  /*A hack to ensure that value is not zero, is necessary for value of a. tbf dunno how much it throws off uniformity */
  if (nonzero == 1){
    return retval+1;
  }
  return retval;
}

void insert_item(Item_Holder *item,Cuckoo_T *table){
  unsigned long long first_adress = first_offset
  if(){

  }
}

unsigned long long first_offset(unsigned long long key, Cuckoo_T *table ){
  return ((table->first_a*key+table->first_b )) % table->max_elements;
}

unsigned long long second_offset(unsigned long long key, Cuckoo_T *table ){
    return ((table->second_a*key+table-> second_b )) % table->max_elements;
}
