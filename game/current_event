src/creature.c:  if(x + (DEFAULT_MAX_INFOBAR_WIDTH  - 1 ) <= gs->num_cols-1){
src/creature.c:    if (gw->width % gs->num_cols == 0){
src/creature.c:      c->position.local_x = gs->num_cols-1;
src/creature.c:      c->position.local_x = (gw->width % gs->num_cols) - 1 + (DEFAULT_MAX_X  - 1 );
src/creature.c:  if(y <= gs->num_rows-1){
src/creature.c:    if (gw->height % gs->num_rows == 0){
src/creature.c:      c->position.local_y = gs->num_rows-1;
src/creature.c:      c->position.local_y = gw->height % gs->num_rows - 1;
src/creature.c:  U_Hashtable *inventory = u_initialize_hashtable(10,gs->twister);
src/#db_reader.c#:  sprintf(gs->game_bfr,"SELECT next_dialogue_id int, choice_consequence \n\
src/#db_reader.c#:  int result_statement = sqlite3_prepare_v2(gs->db,gs->game_bfr, NBYTES, &stmnt, NULL);
src/#db_reader.c#:    err_append_err(gs->game_bfr);
src/db_reader.c:  strcpy(gs->current_event,"SELECT next_dialogue_id, choice_consequence FROM dialogue_option_reponses \n\
src/db_reader.c:  int result_statement = sqlite3_prepare_v2(gs->db,gs->game_bfr, NBYTES, &stmt, NULL);
src/db_reader.c:    err_append_err(gs->current_event);
src/dialogue.c:  manager->next_char_offset = (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 2 ;
src/dialogue.c:  mvwprintw(gs->logs[DIALOGUE_LOG], 1,(gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) / 3,"Talking to: ");
src/dialogue.c:  int curr_name_offset = (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) / 3 + 11;
src/dialogue.c:    mvwprintw(gs->logs[DIALOGUE_LOG], 1, curr_name_offset, "%c", c_2);
src/dialogue.c:  top_panel(gs->panels[DIALOGUE_LOG]);
src/dialogue.c:  while(c != EOF && current_col < gs->num_cols -1){
src/dialogue.c:	  while(char_offset < (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 1 && c != EOF ){
src/dialogue.c:	      mvwprintw(gs->logs[DIALOGUE_LOG], current_col,char_offset, "%c", c);
src/dialogue.c:	hide_panel(gs->panels[DIALOGUE_LOG]);
src/dialogue.c:  int curr_name_offset = (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) / 3 + 11;
src/dialogue.c:    manager->prev_char_offset = offset-2;//;-= ((gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 2);
src/dialogue.c:    fseek(fp, offset - ( (((gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 2)) +1), SEEK_SET);
src/dialogue.c:      manager->prev_char_offset = offset -  ( (((gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 2)));
src/dialogue.c:  wclear(gs->logs[DIALOGUE_LOG]);
src/dialogue.c:  DIA_DRAW_DIALOGUE_BORDER(gs->logs[DIALOGUE_LOG],gs);
src/dialogue.c:  mvwprintw(gs->logs[DIALOGUE_LOG], 1,(gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) / 3,"Talking to: ");
src/dialogue.c:    mvwprintw(gs->logs[DIALOGUE_LOG], 1, curr_name_offset, "%c", c_2);
src/dialogue.c:  while(c != EOF && current_col < gs->num_cols -1){
src/dialogue.c:    while(char_offset < (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 1 && c != EOF ){
src/dialogue.c:	  manager->next_char_offset = (manager->next_char_offset + (gs->num_rows - DEFAULT_MAX_INFOBAR_WIDTH) - 2) - char_offset;
src/dialogue.c:	  mvwprintw(gs->logs[DIALOGUE_LOG], current_col,char_offset, "%c", c);
src/dialogue.c~:  top_panel(gs->panels[DIALOGUE_LOG]);
src/dialogue.c~:  while(current_col < gs->num_cols){
src/dialogue.c~:      //if(strlen(line) > gs->num_cols){
src/dialogue.c~:	//while(offset < gs->num_cols){
src/dialogue.c~:      mvwprintw(gs->logs[DIALOGUE_LOG], current_col,DEFAULT_MAX_INFOBAR_WIDTH - 1,  line);
src/dialogue.c~:	//offset+gs->num_cols;
src/dialogue.c~:	//mvwprintw(gs->logs[DIALOGUE_LOG], current_col, 0, line);
src/dialogue.c~:      hide_panel(gs->panels[DIALOGUE_LOG]);
src/generate.c:  gs->current_zone->tiles[global_y][global_x].content[0] = 't';
src/generate.c:  gs->current_zone->tiles[global_y][global_x].foe = merchant;  
src/generate.c:  gs->current_zone->tiles[global_y][global_x].content[0] = '!';
src/generate.c:  gs->current_zone->tiles[global_y][global_x].foe = manager;
src/information_reader.c:       sprintf(gs->current_event, " %s damages you for 10 damage ",creature_name);
src/information_reader.c:      sprintf(gs->current_event, "You damage %s for 10 damage ",creature_name);
src/information_reader.c:       sprintf(gs->current_event, "%s damages %s for 10 damage",creature_name, target_name);
src/information_reader.c:    sprintf(gs->current_event, "You buy %d %s%s%s%s",amount, quality_name_modifier[((struct Weapon *)item->item->item_specific_info)->quality], material_name_modifier[((struct Weapon *)item->item->item_specific_info)->material], handed_modifier[((struct Weapon *)item->item->item_specific_info)->variant],  mele_weapon_name_modifier[((struct Weapon *)item->item->item_specific_info)->kind]);
src/information_reader.c:    sprintf(gs->current_event, "You buy %d %s%s%s",amount, quality_name_modifier[((struct Armor *)item->item->item_specific_info)->quality], material_name_modifier[((struct Armor *)item->item->item_specific_info)->material], equipment_type_modifier[((struct Armor *)item->item->item_specific_info)->armor_type] );
src/information_reader.c:	sprintf(gs->current_event, "You buy %d %s", amount, item_name);
src/ingame_msg.c:  Item_Holder **item_list = malloc(sizeof(Item_Holder* ) * ((U_Hashtable * )gs->current_zone->tiles[global_y][global_x].foe)->item_count);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[TRADING_LOG]);
src/ingame_msg.c:  INIT_INVENTORY_LOG(gs->logs[TRADING_LOG], "Merchant\'s wares");
src/ingame_msg.c:  for(int i = 0; i < ((U_Hashtable * )gs->current_zone->tiles[global_y][global_x].foe)->size; i++ ){
src/ingame_msg.c:    if(((U_Hashtable * )gs->current_zone->tiles[global_y][global_x].foe)->entries[i] != NULL){
src/ingame_msg.c:      Entry  *current_entry = ((U_Hashtable * )gs->current_zone->tiles[global_y][global_x].foe)->entries[i];
src/ingame_msg.c:	msg_print_item(current_entry->item_holder,gs->logs[TRADING_LOG],5,column_position);
src/ingame_msg.c:  top_panel(gs->panels[TRADING_LOG]);
src/ingame_msg.c:  wmove(gs->logs[TRADING_LOG],curr_curs_pos,5);
src/ingame_msg.c:      hide_panel(gs->panels[TRADING_LOG]);
src/ingame_msg.c:      wmove(gs->logs[TRADING_LOG],curr_curs_pos,5);
src/ingame_msg.c:      wmove(gs->logs[TRADING_LOG],curr_curs_pos,5);
src/ingame_msg.c:      int x_curs_pos = gs->notification_log_width_size/2;
src/ingame_msg.c:      wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:	      wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos-1);
src/ingame_msg.c:	      wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	      box(gs->logs[NOTIFICATION_LOG],0,0);
src/ingame_msg.c:	      mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos,"%d", atoi(amount_bfr));
src/ingame_msg.c:	      wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos+bfr_index);
src/ingame_msg.c:	      wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos-1);
src/ingame_msg.c:	      wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	      mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos,"%s", amount_bfr);
src/ingame_msg.c:	      box(gs->logs[NOTIFICATION_LOG],0,0);
src/ingame_msg.c:	      wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos+(bfr_index));
src/ingame_msg.c:	      hide_panel(gs->panels[NOTIFICATION_LOG]);
src/ingame_msg.c:	       mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "Please enter a number");
src/ingame_msg.c:	     wmove(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     box(gs->logs[NOTIFICATION_LOG],0,0);
src/ingame_msg.c:	    else  if(item_list[curr_curs_pos-2]->item->value * atoi(amount_bfr) >= (((Player_Info * )gs->player->additional_info)->inventory)->money ){
src/ingame_msg.c:		mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "Not enough money");
src/ingame_msg.c:	       mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "Not enough money");
src/ingame_msg.c:	       mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos,"%s", amount_bfr);
src/ingame_msg.c:	     wmove(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     box(gs->logs[NOTIFICATION_LOG],0,0);
src/ingame_msg.c:	     else if( gs->player->current_carry + (item_list[curr_curs_pos-2]->item->weight * atoi(amount_bfr)) > gs->player->max_carry ){
src/ingame_msg.c:	       mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "You cannot carry that many");
src/ingame_msg.c:	       mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,x_curs_pos,"%s", amount_bfr);
src/ingame_msg.c:	       wmove(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:	     wclrtoeol(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:	     box(gs->logs[NOTIFICATION_LOG],0,0);
src/ingame_msg.c:	         inv_exchange_item(item_list[curr_curs_pos-2], (U_Hashtable * )gs->current_zone->tiles[global_y][global_x].foe,gs->player, atoi(amount_bfr));
src/ingame_msg.c:		 wclrtoeol(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:       wclrtoeol(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:	 box(gs->logs[INVENTORY_LOG],0,0);
src/ingame_msg.c:	 msg_print_item(item_list[curr_curs_pos-2],gs->logs[INVENTORY_LOG],5,curr_curs_pos);
src/ingame_msg.c:  top_panel(gs->panels[panel_index]);
src/ingame_msg.c:  box(gs->logs[EVENT_LOG],0,0);
src/ingame_msg.c:      hide_panel(gs->panels[panel_index]);
src/ingame_msg.c:      if(s_only_whitespace(gs->ingame_log[i]) == 1){
src/ingame_msg.c:  wmove(gs->logs[MAIN_SCREEN],gs->num_cols-1, 0);
src/ingame_msg.c:  wclrtoeol(gs->logs[MAIN_SCREEN]);
src/ingame_msg.c:  mvwprintw(gs->logs[MAIN_SCREEN],gs->num_cols-1,0, gs->current_event);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Items in inventory");
src/ingame_msg.c:  item_list = malloc(sizeof(Item_Holder* ) * (((Player_Info * )gs->player->additional_info)->inventory)->item_count);
src/ingame_msg.c:  for(int i = 0; i < (((Player_Info * )gs->player->additional_info)->inventory)->size; i++ ){
src/ingame_msg.c:    if((((Player_Info * )gs->player->additional_info)->inventory)->entries[i] != NULL){
src/ingame_msg.c:      Entry  *current_entry = (((Player_Info * )gs->player->additional_info)->inventory)->entries[i];
src/ingame_msg.c:	msg_print_item(current_entry->item_holder,gs->logs[INVENTORY_LOG],5,column_position);
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:    wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:      hide_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:      wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:      wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Available equipment");
src/ingame_msg.c:  if((((Player_Info * )gs->player->additional_info)->inventory)->item_count > 0){
src/ingame_msg.c:    item_list = malloc(sizeof(Item_Holder* ) * (((Player_Info * )gs->player->additional_info)->inventory)->item_count);
src/ingame_msg.c:  for(int i = 0; i < (((Player_Info * )gs->player->additional_info)->inventory)->item_count; i++){
src/ingame_msg.c:  for(int i = 0; i < (((Player_Info * )gs->player->additional_info)->inventory)->size; i++ ){
src/ingame_msg.c:    if((((Player_Info * )gs->player->additional_info)->inventory)->entries[i] != NULL){
src/ingame_msg.c:      Entry  *current_entry = (((Player_Info * )gs->player->additional_info)->inventory)->entries[i];
src/ingame_msg.c:	msg_print_item(current_entry->item_holder,gs->logs[INVENTORY_LOG],5,column_position);
src/ingame_msg.c:  wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:      hide_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:      wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:      wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:      //mvwprintw(gs->logs[MAIN_SCREEN],gs->num_cols-1,0, "%s", "You equip ");
src/ingame_msg.c:     //msg_print_item(item_list[curr_curs_pos-2],gs->logs[MAIN_SCREEN],11,gs->num_cols-1);
src/ingame_msg.c:     Item_Holder *previously_equipped = inv_equip_item(item_list[curr_curs_pos-2], ((U_Hashtable * )gs->player->additional_info), gs->player);
src/ingame_msg.c:       	wclrtoeol(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      	MSG_COMPRESS_ITEM_LIST(item_list,curr_curs_pos-2,available_equipment,gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:       wclrtoeol(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:	 box(gs->logs[INVENTORY_LOG],0,0);
src/ingame_msg.c:	 msg_print_item(item_list[curr_curs_pos-2],gs->logs[INVENTORY_LOG],5,curr_curs_pos);
src/ingame_msg.c:       int list_pos = msg_find_item_position(gs->logs[INVENTORY_LOG],available_equipment,previously_equipped,item_list);
src/ingame_msg.c:       msg_print_item(item_list[list_pos],gs->logs[INVENTORY_LOG],5,list_pos+2);
src/ingame_msg.c:	 MSG_REDRAW_INVENTORY(item_list,available_equipment,gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:     for(int i = 0; i < (((Player_Info * )gs->player->additional_info)->inventory)->item_count; i++ ){
src/ingame_msg.c:	  wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:	  wmove(gs->logs[INVENTORY_LOG],curr_curs_pos,5);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],1,25, "Items equipped");
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],4,25, "Head slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[head_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,5);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],6,25, "Neck slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[neck_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,7);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],8,25, "Torso slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[torso_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,9);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],12,5, "Finger slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[finger_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],5,13);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],15,25, "Legs slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[legs_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,16);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],18,25, "Feet slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[feet_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,19);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,3, "Mainhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[mainhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],3,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,38, "Offhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[offhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],38,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],2,40, "Back slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[back_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],40,3);  
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:      hide_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:    gs->logs[INVENTORY_LOG] = newwin(LOG_Y_SIZE,LOG_X_SIZE,(gs->num_cols - 1) / 4 , (gs->num_rows - 1) / 4);
src/ingame_msg.c:    gs->panels[INVENTORY_LOG] = new_panel(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:       REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:    INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Items in inventory");
src/ingame_msg.c:    INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Merchant\'s wares");
src/ingame_msg.c:  msg_print_item(item_list[i],gs->logs[INVENTORY_LOG],5,row_position);
src/ingame_msg.c:  wresize(gs->logs[INVENTORY_LOG],LOG_Y_SIZE,LOG_X_SIZE);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:    INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Items in inventory");
src/ingame_msg.c:    INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Merchant\'s wares");
src/ingame_msg.c:  msg_print_item(item_list[i],gs->logs[INVENTORY_LOG],5,row_position);
src/ingame_msg.c:    gs->logs[INVENTORY_LOG] = newwin(LOG_Y_SIZE,LOG_X_SIZE,(gs->num_cols - 1) / 4 , (gs->num_rows - 1) / 4);
src/ingame_msg.c:    gs->panels[INVENTORY_LOG] = new_panel(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:       REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],1,25, "Items equipped");
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],4,25, "Head slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[head_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,5);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],6,25, "Neck slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[neck_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,7);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],8,25, "Torso slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[torso_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,9);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],12,5, "Finger slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[finger_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],5,13);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],15,25, "Legs slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[legs_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,16);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],18,25, "Feet slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[feet_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,19);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,3, "Mainhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[mainhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],3,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,38, "Offhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[offhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],38,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],2,40, "Back slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[back_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],40,3);  
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:  wresize(gs->logs[INVENTORY_LOG],LOG_Y_SIZE,LOG_X_SIZE);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],1,25, "Items equipped");
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],4,25, "Head slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[head_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,5);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],6,25, "Neck slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[neck_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,7);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],8,25, "Torso slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[torso_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,9);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],12,5, "Finger slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[finger_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],5,13);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],15,25, "Legs slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[legs_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,16);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],18,25, "Feet slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[feet_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],25,19);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,3, "Mainhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[mainhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],3,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],10,38, "Offhand slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[offhand_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],38,11);  
src/ingame_msg.c:  mvwprintw(gs->logs[INVENTORY_LOG],2,40, "Back slot:");
src/ingame_msg.c:  item_holder->item = ((Player_Info * )gs->player->additional_info)->equipment_list[back_slot];
src/ingame_msg.c:  msg_print_item(item_holder,gs->logs[INVENTORY_LOG],40,3);  
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:    gs->logs[INVENTORY_LOG] = newwin(LOG_Y_SIZE,LOG_X_SIZE,(gs->num_cols - 1) / 4 , (gs->num_rows - 1) / 4);
src/ingame_msg.c:    gs->panels[INVENTORY_LOG] = new_panel(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:    INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Available equipment");
src/ingame_msg.c:      MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:      top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:       REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:    msg_print_item(item_list[i],gs->logs[INVENTORY_LOG],5,row_position);
src/ingame_msg.c:  top_panel(gs->panels[INVENTORY_LOG]);
src/ingame_msg.c:  wmove(gs->logs[INVENTORY_LOG],curs_pos,5);
src/ingame_msg.c:  wresize(gs->logs[INVENTORY_LOG],LOG_Y_SIZE,LOG_X_SIZE);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[INVENTORY_LOG]);
src/ingame_msg.c:  INIT_INVENTORY_LOG(gs->logs[INVENTORY_LOG], "Available equipment");
src/ingame_msg.c:  REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:    msg_print_item(item_list[i],gs->logs[INVENTORY_LOG],5,row_position);
src/ingame_msg.c:   wmove(gs->logs[INVENTORY_LOG],curs_pos,5);
src/ingame_msg.c:    gs->logs[EVENT_LOG] = newwin(LOG_Y_SIZE,LOG_X_SIZE,(gs->num_cols - 1) / 4 , (gs->num_rows - 1) / 4 );
src/ingame_msg.c:    gs->panels[EVENT_LOG] = new_panel(gs->logs[EVENT_LOG]);
src/ingame_msg.c:    box(gs->logs[EVENT_LOG],0,0);
src/ingame_msg.c:    INIT_EVENT_LOG(gs->logs[EVENT_LOG]);
src/ingame_msg.c:    REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:      mvwprintw(gs->logs[EVENT_LOG], i+3, 12, gs->ingame_log[i]);
src/ingame_msg.c:    INIT_EVENT_LOG(gs->logs[EVENT_LOG]);
src/ingame_msg.c:    wresize(gs->logs[EVENT_LOG],LOG_Y_SIZE,LOG_X_SIZE);
src/ingame_msg.c:    box(gs->logs[EVENT_LOG],0,0);
src/ingame_msg.c:    REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:      mvwprintw(gs->logs[EVENT_LOG], i+3, 12, gs->ingame_log[i]);
src/ingame_msg.c:    gs->logs[TRADING_LOG] = newwin(LOG_Y_SIZE,LOG_X_SIZE,(gs->num_cols - 1) / 4 , (gs->num_rows - 1) / 4 );
src/ingame_msg.c:    gs->panels[TRADING_LOG] = new_panel(gs->logs[TRADING_LOG]);
src/ingame_msg.c:    box(gs->logs[TRADING_LOG],0,0);
src/ingame_msg.c:    gs->logs[NOTIFICATION_LOG] = newwin(LOG_Y_SIZE/4,LOG_X_SIZE,(gs->num_cols - 1) / 2 , (gs->num_rows - 1) / 4);
src/ingame_msg.c:     gs->panels[NOTIFICATION_LOG] = new_panel(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:    INIT_EVENT_LOG(gs->logs[TRADING_LOG]);
src/ingame_msg.c:  else if(x  < gs->num_rows / 4 || y < gs->num_cols / 2){
src/ingame_msg.c:    while(x < gs->num_rows / 4 || y < gs->num_cols / 2){
src/ingame_msg.c:    gs->logs[NOTIFICATION_LOG] = newwin(LOG_Y_SIZE/4,LOG_X_SIZE,(gs->num_cols - 1) / 2 , (gs->num_rows - 1) / 4);
src/ingame_msg.c:     gs->panels[NOTIFICATION_LOG] = new_panel(gs->logs[NOTIFICATION_LOG]);
src/ingame_msg.c:  wresize(gs->logs[TRADING_LOG],LOG_Y_SIZE,LOG_X_SIZE);
src/ingame_msg.c:  REDRAW_MAP(gs,gs->player,gs->current_zone,gs->logs[MAIN_SCREEN], gs->player->position.global_x,gs->player->position.global_y,rows, cols);
src/ingame_msg.c:  MSG_CLEAR_SCREEN(gs->logs[TRADING_LOG]);
src/ingame_msg.c:  INIT_INVENTORY_LOG(gs->logs[TRADING_LOG], "Merchant\'s wares");
src/ingame_msg.c:    msg_print_item(item_list[i],gs->logs[TRADING_LOG],5,column_position);
src/ingame_msg.c:    wresize(gs->logs[NOTIFICATION_LOG],LOG_Y_SIZE/4,LOG_X_SIZE);
src/ingame_msg.c:    wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:      mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2,"%d", atoi(amount_bfr));
src/ingame_msg.c:    wresize(gs->logs[NOTIFICATION_LOG],LOG_Y_SIZE/4,LOG_X_SIZE);
src/ingame_msg.c:    wmove(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2);
src/ingame_msg.c:    //mvwprintw(gs->logs[NOTIFICATION_LOG],gs->notification_log_height_size/2,gs->notification_log_width_size/2,"%d", atoi(amount_bfr));
src/ingame_msg.c:    mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "Not enough money");  
src/ingame_msg.c:     mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "You cannot carry that many");
src/ingame_msg.c:	  mvwprintw(gs->logs[NOTIFICATION_LOG],(gs->notification_log_height_size/2)-1,gs->notification_log_width_size/3, "Please enter a number");
src/main.c:  ((Player_Info *)gs->player->additional_info)->inventory = g_generate_merchant_inventory(3,3,gs->twister);
src/sqlite3.c:  for(j=k=0; j<pArgs->nExpr; j++){
src/sqlite3.c:        sqlite3ExprDup(pParse->db, pArgs->a[j].pExpr, 0), 0);
