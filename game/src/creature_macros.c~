/*This file is part of Revenant.
Revenant is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Revenant  is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Revenant.  If not, see <https://www.gnu.org/licenses/>. */
#include "creature_macros.h"

void cr_m_compute_relative_coords(Creature *creature, Creature *player){
  if(creature->position.global_x > player->position.global_x){
    if(player->position.local_x + (creature->position.global_x - player->position.global_x)) <= DEFAULT_MAX_X-1){
    creature->position.local_x = (player->position.local_x + (creature->position.global_x - player->position.global_x));
    }

    else{
      creature->position.local_x =  DEFAULT_MAX_INFOBAR_WIDTH + ((creature->position.global_x - SET_TO_MIN_X(player)) % ((DEFAULT_MAX_X - DEFAULT_MAX_INFOBAR_WIDTH) + 1));
    }


  else{
    if(player->position.local_x - (player->position.global_x - creature->position.global_x) >= DEFAULT_MAX_INFOBAR_WIDTH ){
  
      creature->position.local_x = player->position.local_x - (player->position.global_x - creature->position.global_x);
  
    }

    else{
      creature->position.local_x = player->position.local_x - (player->position.global_x - creature->position.global_x);
    }
  

  if(creature->position.global_y > player->position.global_y){
    if(player->position.local_y + (creature->position.global_y - player->position.global_y )) <= DEFAULT_MAX_Y - 1){
    creature->position.local_y = (creature->position.local_y - player->position.local_y); 
    }

    else{
      creature->position.local_y = DEFAULT_MIN_Y + ((creature->position.global_y - SET_TO_MIN_Y(player) ) % ((DEFAULT_MAX_Y - DEFAULT_MIN_Y)+1));
    }
  
  else{
    if(player->position.local_y - (player->position.global_y - creature->position.global_y) >= DEFAULT_MIN_Y ){
      creature->position.local_y = player->position.local_y - (player->position.global_y - creature->position.global_y);
    }

    else{
      creature->position.local_y = (DEFAULT_MAX_Y-1) -  ((SET_TO_MAX_Y(player) - creature->position.global_y ) % ((DEFAULT_MAX_Y - DEFAULT_MIN_Y)+1);
      }
    }
  }
}
